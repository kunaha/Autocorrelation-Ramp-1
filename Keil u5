/* USER CODE BEGIN Header */
/**
  ******************************************************************************
	*@objective
			The objectve of this program is to process 2 analog signals (I & Q) at the same time.
			The signals are sended by a FMCW 24GHz radar system connected to a ramp generator circuit and a 2 phase Amplifier.
			To obtain the range of a target from the radar, the beat frequency of the received signal is needed.
			The beat frequency can be estimated using: 
			sumatory from 0 to N-1 of the autocorrelation angle/(2pi(sampling period)(samples of ramp))
			The autocorrelation alge = angle(s(n+1)s*(n)) can be obtained from:
			angle 1 = atan(Q[n]/I[n])
			angle 2 = atan(Q[n+1]/I[n+1]
				autocorrelation angle = angle 1 - angle 2
			Once the beat frequency is obtained, the range per ramp is:
				Range = ((light velocity)(beat frequency)(sampling period))/((2*Bandwidht))
		@author: Karina Ta��n-De Jes�s Fall 2019
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h> //printf and scanf function
#include <math.h> //atanfunction
#include <stdlib.h>


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
//char trans_str[64]; //used to display data at UART and/or LCD display 
/*Counter var*/
int B = 0; //counter for beat freq
int R = 0; //counter for ramp
int N = 0; //counter for correlation
int i = 0; //counter for adc values
int interrupt = 0; //counter for interrupt
int timer = 0; //counter for timer
/*ADC*/
double ADC_val[50000]; //array to save I and Q (DMA array)
float I[25000]; //ADC1 array of values[]
float Q[25000]; //ADC2 array of values [600]
float I_v[25000];
float Q_v[25000];
/*variables*/
double correlation[24999]; //correlation angle array per ramp
double suma[24999]; //the sumatory of correlation angles
float v_min, v_max = 0; //voltage limits of the ramp signal
double angle1;//angle n
double angle2;//angle n + 1
double fbeat; //beat frequency array
double Range[10]; //Range
double suma_range[10]; //avg range for all ramps
double avg_range = 0;
float den; //2*pi*Ts*samples
double fbeat_sum = 0.00;
double fbeat_avg = 0.00;
float Range_m = 0; //range in meters
float percentage = 0;
float perc = 0;
/*constants*/
float period ;
float settle = 2.08; //2.08 ms
double pi = 3.14159265359; //pi number
int samples = 600; //quantity of samples per ramp
float Ts = 0.0001; //sampling period 
int BW = 200000000; //Bandwidht
int c = 300000000; // light velocity
float silo_capacity = 1447.8; //4750 foot to meters = 1447.8

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_ADC2_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* first Pair ADC Method
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
        if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
        {
                uint16_t in0 = 0;
                uint16_t in1 = 0;

        in0 = HAL_ADC_GetValue(&hadc1); //value of ADC1
        in1 = HAL_ADC_GetValue(&hadc2); //value of ADC2

        snprintf(trans_str, 63, "ADC in0 %d in1 %d\n", (uint16_t)in0, (uint16_t)in1);
        HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
        }

}*/
/* USER CODE BEGIN 0 */
uint32_t ADC_vals[2]; //DMA var, 0->I[600], 1->Q[600]
uint16_t I[600]; //ADC1 array of values (x)
uint16_t Q[600]; //ADC2 array of values (y)
char trans_str[64] = {0,};
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
    if(hadc->Instance == &hadc1)
    {
        //HAL_ADCEx_MultiModeStop_DMA(&hadc2);
        snprintf(trans_str, 63, "ADC %d %d\n", (uint16_t)I[i], (uint16_t)Q[i]);
        HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);

        //HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&adc, 2);
    } //if end on code 0
	}//void end on code  0
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
	char sBuffer[40]; 
	uint8_t stringSize;
	/***        *ADC Calibration*         ***/
	HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc2);
	//HAL_ADC_Start_IT(&hadc1);// to receive data without interruptions
 /* ADC start*/
	HAL_ADC_Start(&hadc2); //slave initialized before the master
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*)&I, 600); //master
 /* initialize timer*/
	HAL_TIM_Base_Start_IT(&htmi2); //initialize timer that will stop adc
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {   
Delay(settle);
	  //printf("This is the message before sleep() function\r\n"); //used to test the delay of 3 miliseconds
	      //Sleep(settle); //1000 microsecond= 1 second will sleep...(it has to sleep for exactly the value
	      //delay ADC of samples for I/Q for 3 ms
	         for (R = 0; R < 10; R = R++) { //for each ramp under study. As discussed, ramps = 10
	          for (i = 0; i < 25000; i++) { //this arrays are going to save the ADC1 and ADC2 data (i<25000)
	              //I[i] = rand() % 4095;
	        	  ADC_val[i] = HAL_ADC_GetValue(&hadc1);
	              I[i] = ADC_val[i]; //assign rndm values to I between 0-4095 (0-4
	              ADC_val[i+24999] = HAL_ADC_GetValue(&hadc2);
	              Q[i] = ADC_val[i+24999];
	              //Q[i] = rand() % 4095; //assign rndm values to Q between 0-4095
	              //ADC_val[3 + i] = Q[i];
	              //printf("ADC values Q: %lf\r\n", ADC_val);
	              //used on a C compiler
	             //printf("Enter ADC1: \n");//used on a C compiler (on microcontroller, this function will be getting the ADC1 value)
	             //scanf_s("%f", &I[i]);//used on a C compiler
	             //voltage on pin = (ADC Value)*System voltage (3.3 mv = 3300)/Max ADC val (12 bit ADC))4095)
	             I_v[i] = (I[i] * (3300)) / 4096; //voltage in volts
	   	             //printf("Enter ADC2: \n");//used on a C compiler
	             //scanf_s("%f", &Q[i]);//used on a C compiler
	             Q_v[i] = (Q[i] * (3300)) / 4096; //voltage in volts
	           //
	              /*while (i<600){ //In reality, this is not going to be needed
	               printf("I:%f\n\n",I[i]); //used on a C compiler
	               printf("Q:%f\n\n",Q[i]); //used on a C compiler
	               break; } //used on a C compiler
	               */
	          } //for adc 1 and adc2 values to go to I and Q arrays per ramp
	         } //R
	         //interrupt ADC after all values are taken
	          for (N = 0; N < 25000; N++) //N<600 N=samples
	          {
	              if (N!= 24999) { //for any value other than 599
	                  angle1 = atan(Q_v[N]/I_v[N]); //angle
	                  angle2 = atan(Q_v[N + 1]/I_v[N + 1]); //next angle on the I & Q arrays
	                  correlation[N] = angle1 - angle2; //the angle of correlation <s(n+1)s*(n) = angle1-angle2
	                  suma[N] =  correlation[N] + suma[N - 1]; //
	                  printf("angle1 in first position:%lf\n", angle1);
	                  printf("angle2 in first position: %lf\n", angle2);
	                  printf("correlation in first position: %lf\n", correlation[N]);
	                  printf("primera suma is %lf\n\n", suma[N]);
	              } //N!=final value of array of samples
	              if (N == 24999) { //for 599, the last position of the array
	                  printf("used I in last position:%f\n\n", I_v[N]);
	                  printf("used Q in last position:%f\n\n", Q_v[N]);
	                  angle1 = atan(Q[N] / I[N]);
	                  angle2 = 0; //end of I/Q array
	                  correlation[N] = angle1; //
	                  suma[N] = correlation[N] + suma[N - 1];
	                  printf("angle 1 in last position:%lf\n", angle1);//used on a C compiler
	                  printf("angle 2 in last position:%lf\n", angle2);//used on a C compiler
	                  printf("correlation in last position: %lf\n", correlation[N]);//used on a C compiler
	                  printf("suma is %lf\n\n", suma[N]);
	              } //end of if N==final value of array of samples
	          } //end of correlation counter
	          den = (2 * pi * Ts * samples); //beat frequency estimation denominator
	          printf("-denominator: %f\n", den); //used on a C compiler
	          fbeat = suma[24998] / den; //beat frequency estimation. Suma[last position]/den
	          fbeat_sum = fbeat_sum + fbeat;
	          printf("-beat frequency = %lf\n", fbeat_sum);//used on a C compiler
	       //
	          R = 0;
	          for (R = 0; R < 2; R++) {
	              R = R + 1; //Ramp position on the ramp array
	                  fbeat_avg = fbeat_sum / R;
	                  printf("-f beat avg: %f\n", fbeat_avg);
	                  R = R - 1; //Return to original ramp position
	                  Range[R] = (c * fbeat_avg * Ts) / (2 * BW);
	                  printf("-Range per ramp: %lf\n", Range[R]);  //shows Range per ramp at
	                  suma_range[R] = suma_range[R - 1] + Range[R];
	                  avg_range = suma_range[R] / (R + 1);
	                  printf("--avg range for all: %lf\r\n\n", avg_range);
	          }//range for ramp
	      Range_m = avg_range*1000; //last element of avg_range*1000 to obtain the range in milimeters
	      printf("-Range: %f\n", Range_m);
	      //percentage = 55;
	      percentage = (Range_m / silo_capacity) * 100;
	      perc = 100 - percentage; //full at x percentage
	      printf("--Percentage:  %f\n", perc);

	      return 0;
	  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 800;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
if(htmi->Instance ==TIM2)//	if the source is TIM2
	HAL_ADC_Stop_DMA(&hadc1);
	HAL_ADC_Stop(&hadc2);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
